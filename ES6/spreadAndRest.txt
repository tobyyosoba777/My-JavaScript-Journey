The spread and Rest Operators are both features of ES6 (ECMAScript 6)

They are operators in JavaScript used for working with arrays and objects, and they serve slightly different purposes.
Spread Operator (...):

1. Use in Arrays:

    Spread in Arrays: When used with arrays, the spread operator is used to unpack the elements of an array.

    javascript

    const array1 = [1, 2, 3];
    const array2 = [...array1, 4, 5];
    // array2 is now [1, 2, 3, 4, 5]

2. Use in Objects:

    Spread in Objects: When used with objects, the spread operator is used to clone an object or merge multiple objects.

    javascript

    const obj1 = { a: 1, b: 2 };
    const obj2 = { ...obj1, c: 3 };
    // obj2 is now { a: 1, b: 2, c: 3 }

3. Use in Function Calls:

    Spread in Function Calls: When used in a function call, it can spread the elements of an array as arguments to a function.

    javascript

    const numbers = [1, 2, 3];
    const sum = (a, b, c) => a + b + c;
    const result = sum(...numbers);
    // result is 6

Rest Operator (...):

1. Use in Function Parameters:

    Rest in Function Parameters: When used in function parameters, the rest operator collects the remaining arguments into an array.

    javascript

    const sum = (a, b, ...rest) => {
      // rest is an array containing the remaining arguments
      console.log(rest);
      return a + b + rest.reduce((acc, val) => acc + val, 0);
    };

    const result = sum(1, 2, 3, 4, 5);
    // result is 15

2. Use in Array Destructuring:

    Rest in Array Destructuring: When used in array destructuring, the rest operator collects the remaining elements into an array.

    javascript

    const [first, second, ...rest] = [1, 2, 3, 4, 5];
    // first is 1, second is 2, rest is [3, 4, 5]

In summary, while the spread operator is used to unpack elements or objects, the rest operator is used to collect elements or arguments into an array. They are complementary and provide more flexibility when working with arrays and objects in JavaScript. Both were introduced in ECMAScript 6 (ES6) to enhance the capabilities of the language.